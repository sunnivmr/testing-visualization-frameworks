[{"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/index.js":"1","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/App.js":"2","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/reportWebVitals.js":"3","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/CovidLineChart.js":"4","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/axes/YAxis.js":"5","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/axes/XAxis.js":"6","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/data/useGlobalData.js":"7","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/data/useCountriesData.js":"8","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/LineChart/LineChart.js":"9","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/LineChart/VoronoiOverlay.js":"10","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/CovidLineChart.js":"11","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/useGlobalData.js":"12","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/LineChart.js":"13","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/useCountriesData.js":"14","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/VoronoiOverlay.js":"15","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/axes/XAxis.js":"16","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/axes/YAxis.js":"17","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/LineChartAPI.js":"18","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/data/useData.js":"19","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/LineChart.js":"20","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/axes/XAxis.js":"21","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/LineChart.js":"22","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/useData.js":"23","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/AxisLeft.js":"24","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/AxisBottom.js":"25","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/Marks.js":"26","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/BarChart.js":"27","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/useData.js":"28","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/Marks.js":"29","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/AxisLeft.js":"30","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/AxisBottom.js":"31","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/axes/YAxisRight.js":"32","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/axes/YAxisLeft.js":"33","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/AxisRight.js":"34","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/ScatterPlot.js":"35","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/AxisLeft.js":"36","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/useData.js":"37","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/Marks.js":"38","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/AxisBottom.js":"39","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/AxisTop.js":"40"},{"size":500,"mtime":1608034534236,"results":"41","hashOfConfig":"42"},{"size":2686,"mtime":1613568564836,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":1608034534237,"results":"44","hashOfConfig":"42"},{"size":5623,"mtime":1612863534501,"results":"45","hashOfConfig":"42"},{"size":620,"mtime":1612862181784,"results":"46","hashOfConfig":"42"},{"size":562,"mtime":1612862181784,"results":"47","hashOfConfig":"42"},{"size":1649,"mtime":1612862698213,"results":"48","hashOfConfig":"42"},{"size":2570,"mtime":1612862698213,"results":"49","hashOfConfig":"42"},{"size":4230,"mtime":1612862698186,"results":"50","hashOfConfig":"42"},{"size":745,"mtime":1612862698188,"results":"51","hashOfConfig":"42"},{"size":4005,"mtime":1612862742044,"results":"52","hashOfConfig":"42"},{"size":1649,"mtime":1612862742050,"results":"53","hashOfConfig":"42"},{"size":3984,"mtime":1612883038880,"results":"54","hashOfConfig":"42"},{"size":2581,"mtime":1612862742050,"results":"55","hashOfConfig":"42"},{"size":745,"mtime":1612862742045,"results":"56","hashOfConfig":"42"},{"size":562,"mtime":1612862742046,"results":"57","hashOfConfig":"42"},{"size":620,"mtime":1612862742046,"results":"58","hashOfConfig":"42"},{"size":561,"mtime":1612964405083,"results":"59","hashOfConfig":"42"},{"size":1904,"mtime":1612884696217,"results":"60","hashOfConfig":"42"},{"size":1532,"mtime":1613568372385,"results":"61","hashOfConfig":"42"},{"size":553,"mtime":1612881858454,"results":"62","hashOfConfig":"42"},{"size":2692,"mtime":1613568484740,"results":"63","hashOfConfig":"42"},{"size":569,"mtime":1612862183115,"results":"64","hashOfConfig":"42"},{"size":448,"mtime":1612862183075,"results":"65","hashOfConfig":"42"},{"size":436,"mtime":1612862183074,"results":"66","hashOfConfig":"42"},{"size":601,"mtime":1612862183091,"results":"67","hashOfConfig":"42"},{"size":2228,"mtime":1613568683315,"results":"68","hashOfConfig":"42"},{"size":617,"mtime":1612862181427,"results":"69","hashOfConfig":"42"},{"size":355,"mtime":1612862181402,"results":"70","hashOfConfig":"42"},{"size":269,"mtime":1612862181386,"results":"71","hashOfConfig":"42"},{"size":365,"mtime":1612862181379,"results":"72","hashOfConfig":"42"},{"size":572,"mtime":1613568058723,"results":"73","hashOfConfig":"42"},{"size":563,"mtime":1613567970762,"results":"74","hashOfConfig":"42"},{"size":406,"mtime":1613568492856,"results":"75","hashOfConfig":"42"},{"size":2523,"mtime":1612862183518,"results":"76","hashOfConfig":"42"},{"size":448,"mtime":1612862183501,"results":"77","hashOfConfig":"42"},{"size":617,"mtime":1612862183526,"results":"78","hashOfConfig":"42"},{"size":350,"mtime":1612862183510,"results":"79","hashOfConfig":"42"},{"size":436,"mtime":1612862183501,"results":"80","hashOfConfig":"42"},{"size":294,"mtime":1613568669170,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"rvffk5",{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"93"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"93"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/index.js",[],["169","170"],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/App.js",["171","172"],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/reportWebVitals.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/CovidLineChart.js",["173","174"],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/axes/YAxis.js",[],["175","176"],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/axes/XAxis.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/data/useGlobalData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/data/useCountriesData.js",["177"],"import { useState, useEffect } from \"react\";\nimport { csv, timeParse } from \"d3\";\n\n/*\nconst csvUrlCasesStable =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/7719347bb66e9ebee83ca729d7eafde577841d0d/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\n\nconst csvUrlDeathsStable =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/7719347bb66e9ebee83ca729d7eafde577841d0d/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\n*/\n\nconst csvUrlCasesUpdated =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\n\nconst csvUrlDeathsUpdated =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\n\nconst parseDate = timeParse(\"%m/%d/%y\");\n\nconst transformCountries = (rawData, dataType) => {\n  // Filter out rows that represent provinces or states\n  const countriesData = rawData.filter((d) => !d[\"Province/State\"]);\n\n  // Get timeseries data for each country\n  const dates = rawData.columns.slice(4);\n\n  const countryTimeseries = countriesData.map((d) => {\n    const countryName = d[\"Country/Region\"];\n    const timeseries = dates.map((date) => ({\n      date: parseDate(date),\n      total: +d[date],\n      dataType: dataType,\n      countryName: countryName,\n    }));\n\n    timeseries.countryName = countryName;\n    return timeseries;\n  });\n\n  return countryTimeseries;\n};\n\n// Filter to only show top countries\nconst filterCountries = (\n  countryTimeseries,\n  number = countryTimeseries.length()\n) => {\n  // Sort by total\n  const countryTimeseriesSorted = countryTimeseries.sort((a, b) =>\n    a.slice(-1)[0].total < b.slice(-1)[0].total ? 1 : -1\n  );\n  // Filter out a number of countries\n  const countryTimeseriesFiltered = countryTimeseriesSorted.slice(0, number);\n\n  return countryTimeseriesFiltered;\n};\n\nexport const useCountriesData = (numberOfCountries = 50) => {\n  const [cases, setCases] = useState(null);\n  const [deaths, setDeaths] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrlCasesUpdated).then((rawCases) => {\n      setCases(\n        filterCountries(transformCountries(rawCases, \"case\"), numberOfCountries)\n      );\n    });\n    csv(csvUrlDeathsUpdated).then((rawDeaths) => {\n      setDeaths(\n        filterCountries(\n          transformCountries(rawDeaths, \"death\"),\n          numberOfCountries\n        )\n      );\n    });\n  }, []);\n\n  return [cases, deaths];\n};\n","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/LineChart/LineChart.js",["178"],"import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport {\n  scaleTime,\n  max,\n  line,\n  extent,\n  scaleLinear,\n  scaleLog,\n  format,\n  timeFormat,\n} from \"d3\";\n// import { MarkerLineY } from \"./markerlines/MarkerLineY\";\n// import { MarkerLineX } from \"./markerlines/MarkerLineX\";\nimport { XAxis } from \"../axes/XAxis\";\nimport { YAxis } from \"../axes/YAxis\";\n\nimport { VoronoiOverlay } from \"./VoronoiOverlay\";\n\nconst xValue = (d) => d.date;\nconst yValue = (d) => d.total;\n\n// const tickPaddingX = 7;\nconst tickPaddingY = 10;\n\nconst circleRadius = 5;\nconst epsilon = 1;\n\nconst margin = { top: 20, right: 20, bottom: 20, left: 75 };\n\nconst formatDate = timeFormat(\"%b %d, %Y\");\nconst formatNumber = format(\",\");\n\nexport const LineChart = ({ data, width, height, scale }) => {\n  const [activeRow, setActiveRow] = useState(null);\n  //const [isActiveRowInData, setIsActiveRowInData] = useState(false);\n\n  const innerWidth = width - margin.right - margin.left;\n  const innerHeight = height - margin.top - margin.bottom;\n\n  const allData = useMemo(\n    () =>\n      data.reduce(\n        (accumulator, countryTimeseries) =>\n          accumulator.concat(countryTimeseries),\n        []\n      ),\n    [data]\n  );\n\n  const handleVoronoiHover = useCallback(setActiveRow, [setActiveRow]);\n\n  /*\n  const isActiveRowInData = useMemo(() =>\n    data.map((country) => country.includes(activeRow.countryName), [data])\n  );*/\n\n  const xScale = useMemo(\n    () => scaleTime().domain(extent(allData, xValue)).range([0, innerWidth]),\n    [allData, innerWidth]\n  );\n\n  const yScale = useMemo(\n    () =>\n      scale === \"linear\"\n        ? scaleLinear()\n            .domain([0, max(allData, yValue)])\n            .range([innerHeight, 0])\n        : scaleLog()\n            .domain([epsilon, max(allData, yValue)])\n            .range([innerHeight, 0]),\n    [allData, innerHeight, scale]\n  );\n\n  const lineGenerator = useMemo(\n    () =>\n      line()\n        .x((d) => xScale(xValue(d)))\n        .y((d) => yScale(epsilon + yValue(d))),\n    [xScale, yScale]\n  );\n\n  const CountryLines = () =>\n    useMemo(\n      () =>\n        data.map((countryTimeseries, i) => {\n          return (\n            <path\n              key={i}\n              className=\"country-line\"\n              d={lineGenerator(countryTimeseries)}\n            />\n          );\n        }),\n      []\n    );\n\n  const Tooltip = ({ activeRow, className }) => {\n    return (\n      <text y={-10} className={className}>\n        {activeRow.countryName +\n          \": \" +\n          formatNumber(activeRow.total) +\n          ` ${activeRow.dataType}` +\n          (activeRow.total > 1 ? \"s\" : \"\") +\n          \" as of \" +\n          formatDate(activeRow.date)}\n      </text>\n    );\n  };\n\n  return (\n    <svg width={width} height={height} className=\"line-chart\">\n      <g transform={`translate(${margin.left}, ${margin.top})`}>\n        <XAxis\n          xScale={xScale}\n          innerHeight={innerHeight}\n          scale={scale}\n          tickPadding={tickPaddingY}\n        />\n        <YAxis\n          yScale={yScale}\n          innerWidth={innerWidth}\n          scale={scale}\n          tickPadding={tickPaddingY}\n        />\n        <CountryLines />\n        {activeRow ? (\n          <g className=\"active-group\">\n            <path\n              className=\"country-line active\"\n              d={lineGenerator(\n                data.find((countryTimeseries) => {\n                  return (\n                    countryTimeseries.countryName === activeRow.countryName\n                  );\n                })\n              )}\n            />\n            <g\n              className=\"active-tooltip\"\n              transform={`translate(${lineGenerator.x()(\n                activeRow\n              )}, ${lineGenerator.y()(activeRow)})`}\n            >\n              <circle r={circleRadius} />\n              <Tooltip activeRow={activeRow} className=\"text-stroke\" />\n              <Tooltip activeRow={activeRow} />\n            </g>\n          </g>\n        ) : null}\n        <VoronoiOverlay\n          allData={allData}\n          innerWidth={innerWidth}\n          innerHeight={innerHeight}\n          onHover={handleVoronoiHover}\n          lineGenerator={lineGenerator}\n        />\n      </g>\n    </svg>\n  );\n};\n","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/LineChart/VoronoiOverlay.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/CovidLineChart.js",["179","180","181"],"import React, { useState, useMemo } from \"react\";\nimport { timeFormat, scaleLinear, scaleLog } from \"d3\";\nimport Dropdown from \"react-dropdown\";\nimport Select from \"react-select\";\n\nimport { LineChart } from \"./LineChart\";\nimport { useGlobalData } from \"./useGlobalData\";\nimport { useCountriesData } from \"./useCountriesData\";\n\nimport \"./chart.scss\";\nimport \"react-dropdown/style.css\";\n\n// Using react-dropdown\n// Dataset choices\nconst datasets = [\n  { value: \"deaths\", label: \"Covid deaths\", data: null },\n  { value: \"cases\", label: \"Covid cases\", data: null },\n];\n\n// Set data for dropdown\nconst setData = (value) => {\n  if (value === datasets[0].value) {\n    return datasets[0].data;\n  } else {\n    return datasets[1].data;\n  }\n};\n\n// Scale choices\nconst scales = [\n  { value: \"linear\", label: \"Linear scale\", scale: scaleLinear },\n  { value: \"log\", label: \"Logarithmic scale\", scale: scaleLog },\n];\n\nlet defaultDataset = datasets[0];\nlet defaultScale = scales[0];\n\n// Using react-select\n// Country choices\nconst countries = [\n  { value: \"NOR\", label: \"Norway\" },\n  { value: \"SWE\", label: \"Sweden\" },\n  { value: \"DNM\", label: \"Denmark\" },\n];\n\nconst width = 700;\nconst height = 400;\n\nconst formatNumber = (d) => d.toLocaleString(\"en-US\");\n\nexport const CovidLineChart = () => {\n  const [cases, deaths] = useCountriesData();\n  const [casesGlobal, deathsGlobal] = useGlobalData();\n  const [chosenData, setChosenData] = useState(null);\n\n  const [chosenScale, setChosenScale] = useState(defaultScale);\n  const [chosenDataset, setChosenDataset] = useState(defaultDataset);\n\n  if (!deaths || !cases || !deathsGlobal || !casesGlobal) {\n    return <pre></pre>;\n  }\n\n  // Don't know if this is the best solution\n  if (!chosenData || !chosenScale) {\n    return <p>{setChosenData(deaths)}</p>;\n  }\n\n  // Set default values\n  defaultDataset = chosenData === datasets[1] ? datasets[1] : datasets[0];\n  defaultScale = chosenScale === scales[1] ? scales[1] : scales[0];\n\n  // Sets data to datasets to use it in graph\n  datasets[0].data = deaths;\n  datasets[1].data = cases;\n\n  // Latest date with records\n  const latestDate = timeFormat(\"%m/%d/%y\")(\n    deathsGlobal[deathsGlobal.length - 1].date\n  );\n\n  // Total deaths and cases\n  let totalDeaths = deathsGlobal[deathsGlobal.length - 1].total;\n  let totalCases = casesGlobal[casesGlobal.length - 1].total;\n\n  const info = [\n    { value: latestDate, label: \"Latest date\" },\n    { value: formatNumber(totalDeaths), label: \"Total global deaths\" },\n    { value: formatNumber(totalCases), label: \"Total global cases\" },\n  ];\n\n  // Handle change of data\n  const handleDataChange = (e) => {\n    setChosenDataset(e);\n    setChosenData(setData(e.value));\n    console.log(\"Chosen data: \" + e.value);\n  };\n\n  // Handle change of scale\n  const handleScaleChange = (e) => {\n    setChosenScale(e);\n    console.log(\"Chosen scale: \" + e.value);\n  };\n\n  const Selects = () => {\n    return (\n      <div className=\"dropdowns\">\n        <Select\n          options={datasets}\n          onChange={(e) => handleDataChange(e)}\n          value={chosenDataset}\n        />\n        <Select\n          options={scales}\n          onChange={(e) => handleScaleChange(e)}\n          value={chosenScale}\n        />\n      </div>\n    );\n  };\n\n  const CountrySelect = () => {\n    return (\n      <div className=\"country-select\">\n        <Select\n          options={countries}\n          placeholder=\"Select countries\"\n          isClearable\n          isSearchable\n          isMulti\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"big-chart-section covid-19-countries\">\n      <div className=\"info\">\n        <h4 className=\"section-title\">Coronavirus Line Chart</h4>\n        {info.map((info, i) => (\n          <p key={i}>\n            <strong>{info.label + \":\"}</strong> {info.value}\n          </p>\n        ))}\n        <Selects />\n      </div>\n\n      <LineChart\n        data={chosenData}\n        width={width}\n        height={height}\n        scale={chosenScale.value}\n      />\n    </div>\n  );\n};\n","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/useGlobalData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/LineChart.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/useCountriesData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/VoronoiOverlay.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/axes/XAxis.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/axes/YAxis.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/LineChartAPI.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/data/useData.js",["182"],"import { useState, useEffect } from \"react\";\n\nexport function useData(fromDate, untilDate, dataType) {\n  const [measurementsData, setMeasurementsData] = useState([]);\n  const [inputMeasurementsData, setInputMeasurementsData] = useState([]);\n  const [dataDescription, setDataDescription] = useState(\"\");\n\n  useEffect(() => {\n    // Retrieve data from API\n    // Returns measurements-array with data\n    async function getDataFromAPI() {\n      const urlData = `http://ibmrisvol.ibm.ntnu.no/data?from=${fromDate}%3A00%3A00&until=${untilDate}%3A00%3A00&identifier=${dataType}`;\n      const response = await fetch(urlData);\n      const data = await response.json();\n      return data.data[0].measurements;\n    }\n\n    // Retrieve info about data type from API\n    // Returns description of data type selected\n    async function getInfoFromAPI() {\n      const urlInfo = `http://ibmrisvol.ibm.ntnu.no/data/info?id=${dataType}`;\n      const response = await fetch(urlInfo);\n      const info = await response.json();\n      return info.description;\n    }\n\n    // Wait until both API calls are finished, then set states\n    Promise.all([getDataFromAPI(), getInfoFromAPI()]).then((values) => {\n      setMeasurementsData(values[0]);\n      setDataDescription(values[1]);\n    });\n\n    // Return measurements\n    var measurements = measurementsData.map((data) => Number(data.measurement));\n\n    // Return timestamps\n    const timestamps = measurementsData.map(\n      (data) => new Date(data.time_stamp_utc)\n    );\n\n    // Build the data for input with the first item being the description\n    const newMeasurementsData = [];\n    newMeasurementsData.info = dataDescription;\n\n    measurements.map((data, i) =>\n      newMeasurementsData.push({\n        timestamp: timestamps[i],\n        measurement: measurements[i],\n      })\n    );\n\n    setInputMeasurementsData(newMeasurementsData);\n  });\n  return inputMeasurementsData;\n}\n","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/LineChart.js",["183"],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/axes/XAxis.js",["184"],"import React, { useRef } from \"react\";\nimport { useEffect } from \"react\";\nimport { select, axisBottom } from \"d3\";\n\nexport const XAxis = ({ xScale, innerHeight, tickPadding = 5, tickFormat }) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    const xAxisG = select(ref.current);\n    const xAxis = axisBottom(xScale)\n      .tickSize(-innerHeight)\n      .tickPadding(tickPadding)\n      .tickFormat(tickFormat);\n    xAxisG.call(xAxis);\n  }, [innerHeight, tickPadding, xScale]);\n\n  return <g transform={`translate(0, ${innerHeight})`} ref={ref}></g>;\n};\n","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/LineChart.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/useData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/AxisLeft.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/AxisBottom.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/Marks.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/BarChart.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/useData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/Marks.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/AxisLeft.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/AxisBottom.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/axes/YAxisRight.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/components/LineChartAPI/axes/YAxisLeft.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/LineChart/AxisRight.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/ScatterPlot.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/AxisLeft.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/useData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/Marks.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/ScatterPlot/AxisBottom.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/BarChart/AxisTop.js",[],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":5,"column":10,"nodeType":"191","messageId":"192","endLine":5,"endColumn":21},{"ruleId":"189","severity":1,"message":"193","line":19,"column":10,"nodeType":"191","messageId":"192","endLine":19,"endColumn":22},{"ruleId":"189","severity":1,"message":"194","line":1,"column":27,"nodeType":"191","messageId":"192","endLine":1,"endColumn":34},{"ruleId":"189","severity":1,"message":"195","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":16},{"ruleId":"185","replacedBy":"196"},{"ruleId":"187","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":76,"column":6,"nodeType":"200","endLine":76,"endColumn":8,"suggestions":"201"},{"ruleId":"189","severity":1,"message":"202","line":1,"column":27,"nodeType":"191","messageId":"192","endLine":1,"endColumn":36},{"ruleId":"189","severity":1,"message":"194","line":1,"column":27,"nodeType":"191","messageId":"192","endLine":1,"endColumn":34},{"ruleId":"189","severity":1,"message":"195","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":16},{"ruleId":"189","severity":1,"message":"203","line":121,"column":9,"nodeType":"191","messageId":"192","endLine":121,"endColumn":22},{"ruleId":"198","severity":1,"message":"204","line":8,"column":3,"nodeType":"191","endLine":8,"endColumn":12,"suggestions":"205"},{"ruleId":"189","severity":1,"message":"194","line":1,"column":17,"nodeType":"191","messageId":"192","endLine":1,"endColumn":24},{"ruleId":"198","severity":1,"message":"206","line":15,"column":6,"nodeType":"200","endLine":15,"endColumn":40,"suggestions":"207"},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"no-unused-vars","'ScatterPlot' is defined but never used.","Identifier","unusedVar","'LineChartAPI' is defined but never used.","'useMemo' is defined but never used.","'Dropdown' is defined but never used.",["208"],["209"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'numberOfCountries'. Either include it or remove the dependency array. If 'setCases' needs the current value of 'numberOfCountries', you can also switch to useReducer instead of useState and read 'numberOfCountries' in the reducer.","ArrayExpression",["210"],"'useEffect' is defined but never used.","'CountrySelect' is assigned a value but never used.","React Hook useEffect contains a call to 'setInputMeasurementsData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [measurementsData, dataDescription, fromDate, untilDate, dataType] as a second argument to the useEffect Hook.",["211"],"React Hook useEffect has a missing dependency: 'tickFormat'. Either include it or remove the dependency array.",["212"],"no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},"Update the dependencies array to be: [numberOfCountries]",{"range":"219","text":"220"},"Add dependencies array: [measurementsData, dataDescription, fromDate, untilDate, dataType]",{"range":"221","text":"222"},"Update the dependencies array to be: [innerHeight, tickFormat, tickPadding, xScale]",{"range":"223","text":"224"},[2535,2537],"[numberOfCountries]",[1867,1867],", [measurementsData, dataDescription, fromDate, untilDate, dataType]",[441,475],"[innerHeight, tickFormat, tickPadding, xScale]"]