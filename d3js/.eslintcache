[{"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/index.js":"1","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/App.js":"2","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/reportWebVitals.js":"3","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/CovidLineChart.js":"4","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/axes/YAxis.js":"5","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/axes/XAxis.js":"6","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/data/useGlobalData.js":"7","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/data/useCountriesData.js":"8","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/LineChart/LineChart.js":"9","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/LineChart/VoronoiOverlay.js":"10","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/CovidLineChart.js":"11","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/useGlobalData.js":"12","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/LineChart.js":"13","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/useCountriesData.js":"14","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/VoronoiOverlay.js":"15","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/axes/XAxis.js":"16","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/axes/YAxis.js":"17"},{"size":500,"mtime":1608034534236,"results":"18","hashOfConfig":"19"},{"size":2728,"mtime":1612863014481,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1608034534237,"results":"21","hashOfConfig":"19"},{"size":5622,"mtime":1612863037726,"results":"22","hashOfConfig":"19"},{"size":620,"mtime":1612862181784,"results":"23","hashOfConfig":"19"},{"size":562,"mtime":1612862181784,"results":"24","hashOfConfig":"19"},{"size":1649,"mtime":1612862698213,"results":"25","hashOfConfig":"19"},{"size":2570,"mtime":1612862698213,"results":"26","hashOfConfig":"19"},{"size":4230,"mtime":1612862698186,"results":"27","hashOfConfig":"19"},{"size":745,"mtime":1612862698188,"results":"28","hashOfConfig":"19"},{"size":4005,"mtime":1612862742044,"results":"29","hashOfConfig":"19"},{"size":1649,"mtime":1612862742050,"results":"30","hashOfConfig":"19"},{"size":3984,"mtime":1612862742044,"results":"31","hashOfConfig":"19"},{"size":2581,"mtime":1612862742050,"results":"32","hashOfConfig":"19"},{"size":745,"mtime":1612862742045,"results":"33","hashOfConfig":"19"},{"size":562,"mtime":1612862742046,"results":"34","hashOfConfig":"19"},{"size":620,"mtime":1612862742046,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"rvffk5",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/index.js",[],["74","75"],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/App.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/reportWebVitals.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/CovidLineChart.js",["76","77"],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/axes/YAxis.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/axes/XAxis.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/data/useGlobalData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/data/useCountriesData.js",["78"],"import { useState, useEffect } from \"react\";\nimport { csv, timeParse } from \"d3\";\n\n/*\nconst csvUrlCasesStable =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/7719347bb66e9ebee83ca729d7eafde577841d0d/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\n\nconst csvUrlDeathsStable =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/7719347bb66e9ebee83ca729d7eafde577841d0d/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\n*/\n\nconst csvUrlCasesUpdated =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\n\nconst csvUrlDeathsUpdated =\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\n\nconst parseDate = timeParse(\"%m/%d/%y\");\n\nconst transformCountries = (rawData, dataType) => {\n  // Filter out rows that represent provinces or states\n  const countriesData = rawData.filter((d) => !d[\"Province/State\"]);\n\n  // Get timeseries data for each country\n  const dates = rawData.columns.slice(4);\n\n  const countryTimeseries = countriesData.map((d) => {\n    const countryName = d[\"Country/Region\"];\n    const timeseries = dates.map((date) => ({\n      date: parseDate(date),\n      total: +d[date],\n      dataType: dataType,\n      countryName: countryName,\n    }));\n\n    timeseries.countryName = countryName;\n    return timeseries;\n  });\n\n  return countryTimeseries;\n};\n\n// Filter to only show top countries\nconst filterCountries = (\n  countryTimeseries,\n  number = countryTimeseries.length()\n) => {\n  // Sort by total\n  const countryTimeseriesSorted = countryTimeseries.sort((a, b) =>\n    a.slice(-1)[0].total < b.slice(-1)[0].total ? 1 : -1\n  );\n  // Filter out a number of countries\n  const countryTimeseriesFiltered = countryTimeseriesSorted.slice(0, number);\n\n  return countryTimeseriesFiltered;\n};\n\nexport const useCountriesData = (numberOfCountries = 50) => {\n  const [cases, setCases] = useState(null);\n  const [deaths, setDeaths] = useState(null);\n\n  useEffect(() => {\n    csv(csvUrlCasesUpdated).then((rawCases) => {\n      setCases(\n        filterCountries(transformCountries(rawCases, \"case\"), numberOfCountries)\n      );\n    });\n    csv(csvUrlDeathsUpdated).then((rawDeaths) => {\n      setDeaths(\n        filterCountries(\n          transformCountries(rawDeaths, \"death\"),\n          numberOfCountries\n        )\n      );\n    });\n  }, []);\n\n  return [cases, deaths];\n};\n","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/LineChart/LineChart.js",["79"],"import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport {\n  scaleTime,\n  max,\n  line,\n  extent,\n  scaleLinear,\n  scaleLog,\n  format,\n  timeFormat,\n} from \"d3\";\n// import { MarkerLineY } from \"./markerlines/MarkerLineY\";\n// import { MarkerLineX } from \"./markerlines/MarkerLineX\";\nimport { XAxis } from \"../axes/XAxis\";\nimport { YAxis } from \"../axes/YAxis\";\n\nimport { VoronoiOverlay } from \"./VoronoiOverlay\";\n\nconst xValue = (d) => d.date;\nconst yValue = (d) => d.total;\n\n// const tickPaddingX = 7;\nconst tickPaddingY = 10;\n\nconst circleRadius = 5;\nconst epsilon = 1;\n\nconst margin = { top: 20, right: 20, bottom: 20, left: 75 };\n\nconst formatDate = timeFormat(\"%b %d, %Y\");\nconst formatNumber = format(\",\");\n\nexport const LineChart = ({ data, width, height, scale }) => {\n  const [activeRow, setActiveRow] = useState(null);\n  //const [isActiveRowInData, setIsActiveRowInData] = useState(false);\n\n  const innerWidth = width - margin.right - margin.left;\n  const innerHeight = height - margin.top - margin.bottom;\n\n  const allData = useMemo(\n    () =>\n      data.reduce(\n        (accumulator, countryTimeseries) =>\n          accumulator.concat(countryTimeseries),\n        []\n      ),\n    [data]\n  );\n\n  const handleVoronoiHover = useCallback(setActiveRow, [setActiveRow]);\n\n  /*\n  const isActiveRowInData = useMemo(() =>\n    data.map((country) => country.includes(activeRow.countryName), [data])\n  );*/\n\n  const xScale = useMemo(\n    () => scaleTime().domain(extent(allData, xValue)).range([0, innerWidth]),\n    [allData, innerWidth]\n  );\n\n  const yScale = useMemo(\n    () =>\n      scale === \"linear\"\n        ? scaleLinear()\n            .domain([0, max(allData, yValue)])\n            .range([innerHeight, 0])\n        : scaleLog()\n            .domain([epsilon, max(allData, yValue)])\n            .range([innerHeight, 0]),\n    [allData, innerHeight, scale]\n  );\n\n  const lineGenerator = useMemo(\n    () =>\n      line()\n        .x((d) => xScale(xValue(d)))\n        .y((d) => yScale(epsilon + yValue(d))),\n    [xScale, yScale]\n  );\n\n  const CountryLines = () =>\n    useMemo(\n      () =>\n        data.map((countryTimeseries, i) => {\n          return (\n            <path\n              key={i}\n              className=\"country-line\"\n              d={lineGenerator(countryTimeseries)}\n            />\n          );\n        }),\n      []\n    );\n\n  const Tooltip = ({ activeRow, className }) => {\n    return (\n      <text y={-10} className={className}>\n        {activeRow.countryName +\n          \": \" +\n          formatNumber(activeRow.total) +\n          ` ${activeRow.dataType}` +\n          (activeRow.total > 1 ? \"s\" : \"\") +\n          \" as of \" +\n          formatDate(activeRow.date)}\n      </text>\n    );\n  };\n\n  return (\n    <svg width={width} height={height} className=\"line-chart\">\n      <g transform={`translate(${margin.left}, ${margin.top})`}>\n        <XAxis\n          xScale={xScale}\n          innerHeight={innerHeight}\n          scale={scale}\n          tickPadding={tickPaddingY}\n        />\n        <YAxis\n          yScale={yScale}\n          innerWidth={innerWidth}\n          scale={scale}\n          tickPadding={tickPaddingY}\n        />\n        <CountryLines />\n        {activeRow ? (\n          <g className=\"active-group\">\n            <path\n              className=\"country-line active\"\n              d={lineGenerator(\n                data.find((countryTimeseries) => {\n                  return (\n                    countryTimeseries.countryName === activeRow.countryName\n                  );\n                })\n              )}\n            />\n            <g\n              className=\"active-tooltip\"\n              transform={`translate(${lineGenerator.x()(\n                activeRow\n              )}, ${lineGenerator.y()(activeRow)})`}\n            >\n              <circle r={circleRadius} />\n              <Tooltip activeRow={activeRow} className=\"text-stroke\" />\n              <Tooltip activeRow={activeRow} />\n            </g>\n          </g>\n        ) : null}\n        <VoronoiOverlay\n          allData={allData}\n          innerWidth={innerWidth}\n          innerHeight={innerHeight}\n          onHover={handleVoronoiHover}\n          lineGenerator={lineGenerator}\n        />\n      </g>\n    </svg>\n  );\n};\n","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountries/LineChart/VoronoiOverlay.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/CovidLineChart.js",["80","81","82"],"import React, { useState, useMemo } from \"react\";\nimport { timeFormat, scaleLinear, scaleLog } from \"d3\";\nimport Dropdown from \"react-dropdown\";\nimport Select from \"react-select\";\n\nimport { LineChart } from \"./LineChart\";\nimport { useGlobalData } from \"./useGlobalData\";\nimport { useCountriesData } from \"./useCountriesData\";\n\nimport \"./chart.scss\";\nimport \"react-dropdown/style.css\";\n\n// Using react-dropdown\n// Dataset choices\nconst datasets = [\n  { value: \"deaths\", label: \"Covid deaths\", data: null },\n  { value: \"cases\", label: \"Covid cases\", data: null },\n];\n\n// Set data for dropdown\nconst setData = (value) => {\n  if (value === datasets[0].value) {\n    return datasets[0].data;\n  } else {\n    return datasets[1].data;\n  }\n};\n\n// Scale choices\nconst scales = [\n  { value: \"linear\", label: \"Linear scale\", scale: scaleLinear },\n  { value: \"log\", label: \"Logarithmic scale\", scale: scaleLog },\n];\n\nlet defaultDataset = datasets[0];\nlet defaultScale = scales[0];\n\n// Using react-select\n// Country choices\nconst countries = [\n  { value: \"NOR\", label: \"Norway\" },\n  { value: \"SWE\", label: \"Sweden\" },\n  { value: \"DNM\", label: \"Denmark\" },\n];\n\nconst width = 700;\nconst height = 400;\n\nconst formatNumber = (d) => d.toLocaleString(\"en-US\");\n\nexport const CovidLineChart = () => {\n  const [cases, deaths] = useCountriesData();\n  const [casesGlobal, deathsGlobal] = useGlobalData();\n  const [chosenData, setChosenData] = useState(null);\n\n  const [chosenScale, setChosenScale] = useState(defaultScale);\n  const [chosenDataset, setChosenDataset] = useState(defaultDataset);\n\n  if (!deaths || !cases || !deathsGlobal || !casesGlobal) {\n    return <pre></pre>;\n  }\n\n  // Don't know if this is the best solution\n  if (!chosenData || !chosenScale) {\n    return <p>{setChosenData(deaths)}</p>;\n  }\n\n  // Set default values\n  defaultDataset = chosenData === datasets[1] ? datasets[1] : datasets[0];\n  defaultScale = chosenScale === scales[1] ? scales[1] : scales[0];\n\n  // Sets data to datasets to use it in graph\n  datasets[0].data = deaths;\n  datasets[1].data = cases;\n\n  // Latest date with records\n  const latestDate = timeFormat(\"%m/%d/%y\")(\n    deathsGlobal[deathsGlobal.length - 1].date\n  );\n\n  // Total deaths and cases\n  let totalDeaths = deathsGlobal[deathsGlobal.length - 1].total;\n  let totalCases = casesGlobal[casesGlobal.length - 1].total;\n\n  const info = [\n    { value: latestDate, label: \"Latest date\" },\n    { value: formatNumber(totalDeaths), label: \"Total global deaths\" },\n    { value: formatNumber(totalCases), label: \"Total global cases\" },\n  ];\n\n  // Handle change of data\n  const handleDataChange = (e) => {\n    setChosenDataset(e);\n    setChosenData(setData(e.value));\n    console.log(\"Chosen data: \" + e.value);\n  };\n\n  // Handle change of scale\n  const handleScaleChange = (e) => {\n    setChosenScale(e);\n    console.log(\"Chosen scale: \" + e.value);\n  };\n\n  const Selects = () => {\n    return (\n      <div className=\"dropdowns\">\n        <Select\n          options={datasets}\n          onChange={(e) => handleDataChange(e)}\n          value={chosenDataset}\n        />\n        <Select\n          options={scales}\n          onChange={(e) => handleScaleChange(e)}\n          value={chosenScale}\n        />\n      </div>\n    );\n  };\n\n  const CountrySelect = () => {\n    return (\n      <div className=\"country-select\">\n        <Select\n          options={countries}\n          placeholder=\"Select countries\"\n          isClearable\n          isSearchable\n          isMulti\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"big-chart-section covid-19-countries\">\n      <div className=\"info\">\n        <h4 className=\"section-title\">Coronavirus Line Chart</h4>\n        {info.map((info, i) => (\n          <p key={i}>\n            <strong>{info.label + \":\"}</strong> {info.value}\n          </p>\n        ))}\n        <Selects />\n      </div>\n\n      <LineChart\n        data={chosenData}\n        width={width}\n        height={height}\n        scale={chosenScale.value}\n      />\n    </div>\n  );\n};\n","/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/useGlobalData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/LineChart.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/useCountriesData.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/VoronoiOverlay.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/axes/XAxis.js",[],"/Users/sunnivamathearunde/git/testing-visualization-frameworks/d3js/src/learning/CovidChartCountriesStable/axes/YAxis.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":34},{"ruleId":"87","severity":1,"message":"91","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":76,"column":6,"nodeType":"94","endLine":76,"endColumn":8,"suggestions":"95"},{"ruleId":"87","severity":1,"message":"96","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"88","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":34},{"ruleId":"87","severity":1,"message":"91","line":3,"column":8,"nodeType":"89","messageId":"90","endLine":3,"endColumn":16},{"ruleId":"87","severity":1,"message":"97","line":121,"column":9,"nodeType":"89","messageId":"90","endLine":121,"endColumn":22},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'numberOfCountries'. Either include it or remove the dependency array. If 'setCases' needs the current value of 'numberOfCountries', you can also switch to useReducer instead of useState and read 'numberOfCountries' in the reducer.","ArrayExpression",["100"],"'useEffect' is defined but never used.","'CountrySelect' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},"Update the dependencies array to be: [numberOfCountries]",{"range":"103","text":"104"},[2535,2537],"[numberOfCountries]"]